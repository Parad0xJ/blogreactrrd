{"version":3,"sources":["Card.js","One.js","Two.js","Three.js","Four.js","Five.js","Blog.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","style","maxWidth","head","title","body","footer","One","role","data","map","elt","key","id","userId","Two","Three","Four","Five","Blog","useState","posts","setUsers","useEffect","a","axios","result","fetchData","user1","filter","user2","user3","user4","user5","exact","activeClassName","to","path","Footer","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b679cf8a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Card = props => {\r\n\r\n    return (\r\n        <div className=\"card border-primary my-4 d-flex \" style={{ maxWidth: '20rem' }}>\r\n            <div className=\"card-header bg-transparent border-primary\">{props.head}</div>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{props.title}</h5>\r\n                <p className=\"card-text\">{props.body}</p>\r\n            </div>\r\n            <div className=\"card-footer bg-transparent border-primary\">{props.footer}</div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Card } from './Card'\r\n\r\nexport const One = (props) => {\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className=\"alert alert-success mt-4 h4\" role=\"alert\">\r\n  All Posts By User One\r\n</div>\r\n            <div className=\"d-flex flex-wrap justify-content-around \"> \r\n          {props.data.map(elt => <Card key={elt.id} head={` USER - ${elt.userId}`} title={elt.title} body={elt.body} footer={` ID Post - ${elt.id}`}  />)}\r\n          </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Card } from './Card'\r\nexport const Two = (props) => {\r\n\r\n    return (\r\n        <div>\r\n                     <div className='container'>\r\n                     <div className=\"alert alert-warning mt-4 h4\" role=\"alert\">\r\n  All Posts By User Two\r\n</div>\r\n            <div className=\"d-flex flex-wrap justify-content-around \"> \r\n          {props.data.map(elt => <Card key={elt.id} head={` USER - ${elt.userId}`} title={elt.title} body={elt.body} footer={` ID Post - ${elt.id}`}  />)}\r\n          </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Card } from './Card'\r\n\r\nexport const Three = (props) => {\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className=\"alert alert-danger mt-4 h4\" role=\"alert\">\r\n  All Posts By User Three\r\n</div>\r\n            <div className=\"d-flex flex-wrap justify-content-around\"> \r\n          {props.data.map(elt => <Card key={elt.id} head={` USER - ${elt.userId}`} title={elt.title} body={elt.body} footer={` ID Post - ${elt.id}`}  />)}\r\n          </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Card } from './Card'\r\n\r\nexport const Four = (props) => {\r\n\r\n    return (\r\n        <div className='container'>\r\n        <div className=\"alert alert-info mt-4 h4\" role=\"alert\">\r\nAll Posts By User Four\r\n</div>\r\n        <div className=\"d-flex flex-wrap justify-content-around \"> \r\n      {props.data.map(elt => <Card key={elt.id} head={` USER - ${elt.userId}`} title={elt.title} body={elt.body} footer={` ID Post - ${elt.id}`}  />)}\r\n      </div>\r\n    </div>\r\n    )\r\n} ","import React from 'react'\r\nimport { Card } from './Card'\r\n\r\nexport const Five = (props) => {\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className=\"alert alert-primary mt-4 h4\" role=\"alert\">\r\n                All Posts By User Five\r\n</div>\r\n            <div className=\"d-flex flex-wrap justify-content-around\">\r\n                {props.data.map(elt => <Card key={elt.id} head={` USER - ${elt.userId}`} title={elt.title} body={elt.body} footer={` ID Post - ${elt.id}`} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n} ","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { BrowserRouter as Router, Route, Switch, NavLink } from 'react-router-dom'\r\nimport { One } from './One'\r\nimport { Two } from './Two'\r\nimport { Three } from './Three'\r\nimport { Four } from './Four'\r\nimport { Five } from './Five'\r\n\r\n\r\nexport const Blog = () => {\r\n\r\n    const [posts, setUsers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await axios('https://jsonplaceholder.typicode.com/posts');\r\n            setUsers(result.data)\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const user1 = posts.filter((elt) => elt.userId === 1)\r\n    const user2 = posts.filter((elt) => elt.userId === 2)\r\n    const user3 = posts.filter((elt) => elt.userId === 3)\r\n    const user4 = posts.filter((elt) => elt.userId === 4)\r\n    const user5 = posts.filter((elt) => elt.userId === 5)\r\n\r\n    return (\r\n        <div>\r\n            <Router>\r\n                <nav id='navbar' className=\"navbar navbar-light\">\r\n                    <p><span className='h4'>My Blog</span> <small>Version 2020 - I tried to use react-router dom</small></p>\r\n                    <ul >\r\n                        <div >\r\n                            <ul className='list-group list-group-horizontal ' role='tablist'>\r\n                            <li className='list-group-item '>\r\n                                <NavLink exact activeClassName='current' to='/'>User 1</NavLink>\r\n                                </li>\r\n                                <li className='list-group-item nav-item '>\r\n                                <NavLink exact activeClassName='current' to='/two'> User-2</NavLink>\r\n                                </li>\r\n                                <li className='list-group-item nav-item '>\r\n                                <NavLink exact activeClassName='current' to='/three'>User-3</NavLink>\r\n                                </li>\r\n                                <li className='list-group-item nav-item '>\r\n                                <NavLink exact activeClassName='current' to='/four'>User-4</NavLink>\r\n                                </li>\r\n                                <li className='list-group-item nav-item '>\r\n                                <NavLink exact activeClassName='current' to='/five'>User-5</NavLink>\r\n                                </li>\r\n                            </ul>\r\n\r\n                        </div>\r\n                    </ul>\r\n                </nav>\r\n\r\n                <Switch>\r\n                    <Route exact path='/' > <One data={user1} /> </Route>\r\n                    <Route path='/two' > <Two data={user2} /> </Route>\r\n                    <Route path='/three' > <Three data={user3} /></Route>\r\n                    <Route path='/four'> <Four data={user4}/></Route>\r\n                    <Route path='/five' ><Five data={user5}/> </Route>\r\n                </Switch>\r\n\r\n            </Router>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Footer = () =>{\r\n    return(\r\n        <div className='jumbotron bgFooter py-2'>\r\n            <h4>Blog version 2020</h4>\r\n           <p className='lead'>I’ve been learning React for a few months and I’m doing a few little apps like this to practice React.</p>\r\n           <p>I used : Create-React-App - Bootstrap IV - Axios - <a href=\"https://jsonplaceholder.typicode.com/\">Json placeHolder API</a></p>\r\n           <p>© Fevrier 2020 Laurent CAMINADE</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport { Blog, Footer } from './Blog'\n\nimport './App.css';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <Blog />   \n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}